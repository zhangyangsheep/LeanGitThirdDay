windows安装git完成后，设置用户名和邮箱
	git config --global user.name "yangzhang"
	git config --global user.email "13218880218@163.com"
	
创建git版本库
	进入目录或创建目录后进入
	git init
	$ git init
Initialized empty Git repository in E:/MySelfPlans/MyCodePlan-1/Git/git_repository1/.git/
	
提交git仓库
	$ git add readme.txt
	$ git commit -m "write a readme text file"
	[master (root-commit) a5a02fb] write a readme text file
	1 file changed, 2 insertions(+)
 create mode 100644 readme.txt

第一步，用命令git add告诉Git，把文件添加到仓库：
第二步，用命令git commit告诉Git，把文件提交到仓库：

简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

嫌麻烦不想输入-m "xxx"行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。

git commit命令执行成功后会告诉你，1 file changed：1个文件被改动（我们新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt有两行内容）。

--时光机穿梭
git status : 查看git仓库状态，文件是否改变
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")

after git add readme.txt
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   readme.txt



git diff : 查看某个文件的修改的地方
$ git diff readme.txt
diff --git a/readme.txt b/readme.txt
index d8036c1..013b5bc 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.
\ No newline at end of file


git log : 查看历史提交记录
git log --pretty=oneline : 一行显示查看记录

git reset --hard HEAD^^(HEAD~2) : 重置到前两个版本
git reset --hard commitid

git reflog : 记录每一条命令
$ git reflog
b4dffa1 (HEAD -> master) HEAD@{0}: reset: moving to b4dff
46ffae7 HEAD@{1}: reset: moving to head^
b4dffa1 (HEAD -> master) HEAD@{2}: reset: moving to head
b4dffa1 (HEAD -> master) HEAD@{3}: commit: about GPL of git
46ffae7 HEAD@{4}: commit: I can use git add * ,add all modify files!
bbf9fd9 HEAD@{5}: commit: add modify commit
a5a02fb HEAD@{6}: commit (initial): write a readme text file

stage : Git暂存区的概念  git add
head指向工作区  git commit

工作区 （我本机存放文件的地方）
	↓
暂存区 （add到缓存区，提交到版本库前即commit前）
	↓
版本库 （commit缓存区中的修改，到版本库中repository)
	
缓存区回退到工作区 （git reset HEAD <file>)
	↓
工作区回退到之前提交 （git checkout -- <file>)


-- 远程仓库
在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key
创建ssh key : ssh-keygen -t rsc -C "13218880218"
$ ssh-keygen -t rsa -C "13218880218@163.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/84204/.ssh/id_rsa):
Created directory '/c/Users/84204/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/84204/.ssh/id_rsa.
Your public key has been saved in /c/Users/84204/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:ymO03H9IxBArkxcyb55mYLn+R1zhHJ9S9e6pTQfA6kc 13218880218@163.com
The key's randomart image is:
+---[RSA 2048]----+
|      o o.     ..|
|       *.o .o . .|
|      B =o oo= ..|
|     . O .o.=.o. |
|      o So..E.. .|
|     = * .+.   o.|
|      O .o...  oo|
|     . o .o.. + .|
|        .... . . |
+----[SHA256]-----+


在GitHub上创建新的仓库repository：LeanGitThirdDay；
然后与本地仓库关联 ：git remote add origin git@github.com:zhangyangsheep/LeanGitThirdDay.git
关联后使用命令第一次推送master分支： git push -u origin master
以后每次提交就可以写： git push -u origin master

如果你本地关联的远程库origin错误，删除： git remote rm origin
然后使用该命令重新创建： git remote add origin git@github.com:zhangyangsheep/LeanGitThirdDay.git

github.com:zhangyangsheep/LeanGitThirdDay.git

GitHub中创建远程库，并拷贝到本地来 ： git clone git@github.com:zhangyangsheep/gitskills.git

--分支管理
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

eg.
$ git checkout -b dev
Switched to a new branch 'dev'

$ git branch dev
fatal: A branch named 'dev' already exists.

$ git branch
* dev
  master

$ git add readme.txt

$ git status
On branch dev
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   readme.txt

$ git commit -m "branch commit "
[dev d81fa45] branch commit
 1 file changed, 3 insertions(+), 1 deletion(-)

$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
My stupid boss still prefers SVN.
End this Git Read.

$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

$ git merge dev
Updating c85c331..d81fa45
Fast-forward
 readme.txt | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

$ git branch
  dev
* master

$ git checkout dev
Switched to branch 'dev'

$ git branch
* dev
  master

$ vi readme.txt

$ git merge dev
Already up to date.

$ git branch
* dev
  master

$ git checkout master
Switched to branch 'master'
M       readme.txt
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

$ git branch
  dev
* master

$ git branch -d dev
Deleted branch dev (was d81fa45).

$ git branch
* master

-- 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。
